/*
Copyright 2018 The Knative Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/vaikas-google/cloudschedulersource/pkg/apis/cloudschedulersource/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CloudSchedulerSourceLister helps list CloudSchedulerSources.
type CloudSchedulerSourceLister interface {
	// List lists all CloudSchedulerSources in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CloudSchedulerSource, err error)
	// CloudSchedulerSources returns an object that can list and get CloudSchedulerSources.
	CloudSchedulerSources(namespace string) CloudSchedulerSourceNamespaceLister
	CloudSchedulerSourceListerExpansion
}

// cloudSchedulerSourceLister implements the CloudSchedulerSourceLister interface.
type cloudSchedulerSourceLister struct {
	indexer cache.Indexer
}

// NewCloudSchedulerSourceLister returns a new CloudSchedulerSourceLister.
func NewCloudSchedulerSourceLister(indexer cache.Indexer) CloudSchedulerSourceLister {
	return &cloudSchedulerSourceLister{indexer: indexer}
}

// List lists all CloudSchedulerSources in the indexer.
func (s *cloudSchedulerSourceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudSchedulerSource, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudSchedulerSource))
	})
	return ret, err
}

// CloudSchedulerSources returns an object that can list and get CloudSchedulerSources.
func (s *cloudSchedulerSourceLister) CloudSchedulerSources(namespace string) CloudSchedulerSourceNamespaceLister {
	return cloudSchedulerSourceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// CloudSchedulerSourceNamespaceLister helps list and get CloudSchedulerSources.
type CloudSchedulerSourceNamespaceLister interface {
	// List lists all CloudSchedulerSources in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CloudSchedulerSource, err error)
	// Get retrieves the CloudSchedulerSource from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CloudSchedulerSource, error)
	CloudSchedulerSourceNamespaceListerExpansion
}

// cloudSchedulerSourceNamespaceLister implements the CloudSchedulerSourceNamespaceLister
// interface.
type cloudSchedulerSourceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all CloudSchedulerSources in the indexer for a given namespace.
func (s cloudSchedulerSourceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CloudSchedulerSource, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CloudSchedulerSource))
	})
	return ret, err
}

// Get retrieves the CloudSchedulerSource from the indexer for a given namespace and name.
func (s cloudSchedulerSourceNamespaceLister) Get(name string) (*v1alpha1.CloudSchedulerSource, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cloudschedulersource"), name)
	}
	return obj.(*v1alpha1.CloudSchedulerSource), nil
}
